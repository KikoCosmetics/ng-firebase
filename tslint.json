{
  "extends": [
    "tslint:recommended",
    "tslint-consistent-codestyle"
  ],
  "rulesDirectory": [
    "codelyzer"
  ],
  "linterOptions": {
    "exclude": [
      "*.test"
    ]
  },
  "rules": {
    "align": {
      "options": [
        "parameters",
        "statements"
      ]
    },
    "array-type": false,
    "arrow-return-shorthand": true,
    "curly": true,
    "deprecation": {
      "severity": "warning"
    },
    "component-class-suffix": [
      true,
      "Page",
      "Component"
    ],
    "contextual-lifecycle": true,
    "directive-class-suffix": true,
    "directive-selector": [
      true,
      "attribute",
      "kik",
      "camelCase"
    ],
    "component-selector": [
      true,
      "element",
      "kik",
      "kebab-case"
    ],
    "eofline": true,
    "import-blacklist": [
      true,
      "rxjs/Rx"
    ],
    "import-spacing": true,
    "indent": {
      "options": [
        "spaces"
      ]
    },
    "max-classes-per-file": false,
    "max-line-length": [
      true,
      150
    ],
    "no-debugger": true,
    "no-console": [
      false,
      "debug",
      "info",
      "time",
      "timeEnd",
      "trace"
    ],
    "no-empty": false,
    "no-inferrable-types": [
      false,
      "ignore-params"
    ],
    "no-non-null-assertion": true,
    "no-redundant-jsdoc": true,
    "no-switch-case-fall-through": true,
    "no-var-requires": false,
    "object-literal-key-quotes": [
      true,
      "as-needed"
    ],
    "quotemark": [
      true,
      "double"
    ],
    "semicolon": {
      "options": [
        "always"
      ]
    },
    "space-before-function-paren": {
      "options": {
        "anonymous": "never",
        "asyncArrow": "always",
        "constructor": "never",
        "method": "never",
        "named": "never"
      }
    },
    "typedef-whitespace": {
      "options": [
        {
          "call-signature": "nospace",
          "index-signature": "nospace",
          "parameter": "nospace",
          "property-declaration": "nospace",
          "variable-declaration": "nospace"
        },
        {
          "call-signature": "onespace",
          "index-signature": "onespace",
          "parameter": "onespace",
          "property-declaration": "onespace",
          "variable-declaration": "onespace"
        }
      ]
    },
    "variable-name": false,
    "whitespace": {
      "options": [
        "check-branch",
        "check-decl",
        "check-operator",
        "check-separator",
        "check-type",
        "check-typecast"
      ]
    },
    "no-conflicting-lifecycle": true,
    "no-host-metadata-property": true,
    "no-input-rename": true,
    "no-inputs-metadata-property": true,
    "no-output-native": true,
    "no-output-on-prefix": true,
    "no-output-rename": true,
    "no-outputs-metadata-property": true,
    "template-banana-in-box": true,
    "template-no-negated-async": true,
    "use-lifecycle-interface": true,
    "use-pipe-transform-interface": true,
    "object-literal-sort-keys": false,
    "no-bitwise": true,
    "interface-over-type-literal": true,
    "trailing-comma": false,
    "no-unused-expression": false,
    "newline-before-return": true,
    "member-ordering": [
      true,
      {
        "alphabetize": true,
        "order": [
          "public-static-accessor",
          "protected-static-accessor",
          "private-static-accessor",
          "public-static-field",
          "protected-static-field",
          "private-static-field",
          "public-instance-accessor",
          "protected-instance-accessor",
          "private-instance-accessor",
          "public-instance-field",
          "protected-instance-field",
          "private-instance-field",
          "constructor",
          "public-static-method",
          "protected-static-method",
          "private-static-method",
          "public-instance-method",
          "protected-instance-method",
          "private-instance-method"
        ]
      }
    ],
    "file-name-casing": [
      true,
      "kebab-case"
    ],
    "naming-convention": [
      true,
      {
        "type": "default",
        "modifiers": [
        ],
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "forbid"
      },
      // override the above format option for exported constants to allow only UPPER_CASE
      {
        "type": "variable",
        "modifiers": [
          "export",
          "const"
        ],
        "format": "UPPER_CASE",
        "prefix": "KIK_"
      },
      // require exported constant variables that are initialized with functions to be camelCase
      {
        "type": "functionVariable",
        "modifiers": [
          "export",
          "const"
        ],
        "format": "camelCase"
      },
      // require leading and trailing underscores for unused parameters, to promote code tidiness
      // all other rules (trailingUnderscore: forbid, format: camelCase) still apply
      {
        "type": "parameter",
        "modifiers": "unused",
        "leadingUnderscore": "require",
        "trailingUnderscore": "require"
      },
      // exclicitly disable the format check only for method toJSON
      {
        "type": "method",
        "filter": "^toJSON$",
        "format": null
      },
      // CLASS STUFF - START
      // require leading underscores for private properties and methods, all other rules still apply
      {
        "type": "member",
        "modifiers": "private",
        "leadingUnderscore": "require"
      },
      // same for protected
      {
        "type": "member",
        "modifiers": "protected",
        "leadingUnderscore": "require"
      },
      // enforce UPPER_CASE for all public static readonly(!) properties
      {
        "type": "member",
        "modifiers": [
          "static",
          "readonly"
        ],
        "format": [
          "UPPER_CASE"
        ]
      },
      {
        "type": "method",
        "format": "camelCase",
        "leadingUnderscore": "forbid"
      },
      {
        "type": "method",
        "modifiers": [
          "protected"
        ],
        "format": "camelCase",
        "leadingUnderscore": "require"
      },
      {
        "type": "method",
        "modifiers": [
          "private"
        ],
        "format": "camelCase",
        "leadingUnderscore": "require"
      },
      // enforce PascalCase for classes, interfaces, enums, etc. Remember, there are still no underscores allowed.
      {
        "type": "type",
        "format": "PascalCase",
        "prefix": "Kik"
      },
      // abstract classes must have the prefix "Abstract". The following part of the name must be valid PascalCase
      {
        "type": "class",
        "modifiers": "export",
        "prefix": "Kik"
      },
      // enum members must be in camelCase. Without this config, enumMember would inherit UPPER_CASE from public static const property
      {
        "type": "enumMember",
        "format": [
          "camelCase",
          "UPPER_CASE"
        ]
      },
      {
        "type": "genericTypeParameter",
        "format": [
          "UPPER_CASE"
        ],
        "prefix": ""
      }
    ]
  }
}
